#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<unistd.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<fcntl.h>
#define BUFFER_SIZE 4096
#define DEFAULT_PORT 8080
int main(int argc, char *argv[]) {
    int sockfd, newsockfd, portno, fd, n;
    struct sockaddr_in seradd, cliadd;
    socklen_t clilen;
    char buffer[BUFFER_SIZE];
    portno = (argc > 1) ? atoi(argv[1]) : DEFAULT_PORT;
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Error opening socket");
        exit(EXIT_FAILURE);
    }
    memset(&seradd, 0, sizeof(seradd));
    seradd.sin_family = AF_INET;
    seradd.sin_addr.s_addr = INADDR_ANY;
    seradd.sin_port = htons(portno);
    if (bind(sockfd, (struct sockaddr *)&seradd, sizeof(seradd)) < 0) {
        perror("Error binding socket");
        close(sockfd);
        exit(EXIT_FAILURE);
    }
    listen(sockfd, 5);
    printf("Server listening on port %d\n", portno);
    clilen = sizeof(cliadd);
    while (1) {
        newsockfd = accept(sockfd, (struct sockaddr *)&cliadd, &clilen);
        if (newsockfd < 0) {
            perror("Error accepting connection");
            continue;
        }
        memset(buffer, 0, BUFFER_SIZE);
        if (read(newsockfd, buffer, BUFFER_SIZE) <= 0) {
            perror("Error reading filename");
            close(newsockfd);
            continue;
        }
        fd = open(buffer, O_RDONLY);
        if (fd < 0) {
            perror("File does not exist");
            close(newsockfd);
            continue;
        }
        while ((n = read(fd, buffer, BUFFER_SIZE)) > 0) {
            write(newsockfd, buffer, n);
        }
        printf("File transfer completed for '%s'\n", buffer);
        close(fd);
        close(newsockfd);
    }
    close(sockfd);
    return 0;
}
